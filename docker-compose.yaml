version: '3'

volumes:
  mimir-1-data:
  mimir-2-data:
  mimir-3-data:
  minio-data:

services:
  books:
    build:
      context: ./MicroServices/books  #building image of books micro-service
      dockerfile: Dockerfile
    container_name: books-services
    ports:
      - 4545:4545
    networks:
      - monitoring
  customers:
    build:
      context: ./MicroServices/customers  #building image of customers micro-service
      dockerfile: Dockerfile
    container_name: customer-services
    ports:
      - 5555:5555
    networks:
      - monitoring
  orders:
    build:
      context: ./MicroServices/orders   #building image of orders micro-service
      dockerfile: Dockerfile
    container_name: orders-services
    ports:
      - 7777:7777
    networks:
      - monitoring

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      # - ./grafana/tmp:/var/lib/grafana
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    networks:
      - monitoring

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.rootfs=/rootfs' 
      - '--path.sysfs=/host/sys' 
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)' 
    ports:
      - 9100:9100
    networks:
      - monitoring
  
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - 8081:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring
    depends_on:
      - redis
  
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - 6379:6379

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/config:/etc/prometheus
      - ./prometheus/tmp:/prometheus
    command: 
      - --config.file=/etc/prometheus/prometheus.yaml
      - --storage.tsdb.path=/prometheus
    depends_on:
      - "cadvisor"
      - "mimir-1"
      - "mimir-2"
      - "mimir-3"
    networks:
      - monitoring

  load-balancer:
    image: nginx:latest
    container_name: load_balancer
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - "mimir-1"
      - "mimir-2"
      - "mimir-3"
    ports:
      - 9009:9009

  mimir-1:
    image: grafana/mimir:latest
    container_name: mimir-1
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir-1
    depends_on:
      - minio
    volumes:
      - ./config/mimir.yaml:/etc/mimir.yaml
      # - ./config/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - mimir-1-data:/data

  mimir-2:
    image: grafana/mimir:latest
    container_name: mimir-2
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir-2
    depends_on:
      - minio
    volumes:
      - ./config/mimir.yaml:/etc/mimir.yaml
      # - ./config/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - mimir-2-data:/data

  mimir-3:
    image: grafana/mimir:latest
    container_name: mimir-3
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir-3
    depends_on:
      - minio
    volumes:
      - ./config/mimir.yaml:/etc/mimir.yaml
      # - ./config/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - mimir-3-data:/data

  minio:
    image: minio/minio
    container_name: minio
    entrypoint: [""]
    command: ["sh", "-c", "mkdir -p /data/mimir && minio server --quiet /data"]
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    volumes:
      - minio-data:/data

networks:
  monitoring:
    driver: bridge